{
  "name": "Document Processing Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "document-uploaded",
        "responseMode": "responseNode",
        "responseData": "allEntries",
        "options": {}
      },
      "id": "webhook-document-upload",
      "name": "Document Upload Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "document-upload-trigger"
    },
    {
      "parameters": {
        "functionCode": "// Extract document information\nconst documentData = items[0].json;\n\n// Validate required fields\nif (!documentData.documentId || !documentData.content) {\n  throw new Error('Missing required document data');\n}\n\n// Prepare data for AI analysis\nreturn [\n  {\n    json: {\n      documentId: documentData.documentId,\n      content: documentData.content,\n      title: documentData.title || 'Untitled Document',\n      authorId: documentData.authorId,\n      timestamp: new Date().toISOString(),\n      analysisTypes: ['grammar', 'structure', 'plagiarism']\n    }\n  }\n];"
      },
      "id": "process-document-data",
      "name": "Process Document Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "={{$env.API_BASE_URL}}/ai/analyze",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$env.API_TOKEN}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "documentId",
              "value": "={{$json.documentId}}"
            },
            {
              "name": "content",
              "value": "={{$json.content}}"
            },
            {
              "name": "analysisTypes",
              "value": "={{$json.analysisTypes}}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "ai-analysis-request",
      "name": "AI Analysis Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [680, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "analysis-success",
              "leftValue": "={{$json.success}}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-analysis-result",
      "name": "Check Analysis Result",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "url": "={{$env.API_BASE_URL}}/reviews",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$env.API_TOKEN}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "documentId",
              "value": "={{$json.documentId}}"
            },
            {
              "name": "analysisResult",
              "value": "={{$json.analysisResult}}"
            },
            {
              "name": "score",
              "value": "={{$json.score}}"
            },
            {
              "name": "suggestions",
              "value": "={{$json.suggestions}}"
            }
          ]
        }
      },
      "id": "save-analysis-result",
      "name": "Save Analysis Result",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "url": "={{$env.API_BASE_URL}}/notifications/send",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$env.API_TOKEN}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "userId",
              "value": "={{$json.authorId}}"
            },
            {
              "name": "type",
              "value": "analysis_complete"
            },
            {
              "name": "message",
              "value": "Tu documento '{{$json.title}}' ha sido analizado. Puntuaci√≥n: {{$json.score}}/100"
            },
            {
              "name": "documentId",
              "value": "={{$json.documentId}}"
            }
          ]
        }
      },
      "id": "send-notification",
      "name": "Send Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1340, 200]
    },
    {
      "parameters": {
        "url": "={{$env.API_BASE_URL}}/logs/error",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$env.API_TOKEN}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "error",
              "value": "Analysis failed for document {{$json.documentId}}"
            },
            {
              "name": "documentId",
              "value": "={{$json.documentId}}"
            },
            {
              "name": "timestamp",
              "value": "={{new Date().toISOString()}}"
            }
          ]
        }
      },
      "id": "log-error",
      "name": "Log Error",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1120, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\"success\": true, \"message\": \"Document processing completed\", \"documentId\": \"{{$json.documentId}}\"}"
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1560, 200]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\"success\": false, \"message\": \"Document processing failed\", \"documentId\": \"{{$json.documentId}}\"}"
      },
      "id": "error-response",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 400]
    }
  ],
  "connections": {
    "Document Upload Webhook": {
      "main": [
        [
          {
            "node": "Process Document Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Document Data": {
      "main": [
        [
          {
            "node": "AI Analysis Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Analysis Request": {
      "main": [
        [
          {
            "node": "Check Analysis Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Analysis Result": {
      "main": [
        [
          {
            "node": "Save Analysis Result",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Analysis Result": {
      "main": [
        [
          {
            "node": "Send Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Notification": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Error": {
      "main": [
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "document-processing-workflow",
  "tags": []
}
